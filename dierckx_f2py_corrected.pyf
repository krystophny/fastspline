!    -*- f90 -*-
! Note: the context of this file is case sensitive.

python module dierckx_f2py ! in 
    interface  ! in :dierckx_f2py
        subroutine surfit(iopt,m,x,y,z,w,xb,xe,yb,ye,kx,ky,s,nxest,nyest,nmax,eps,nx,tx,ny,ty,c,fp,wrk1,lwrk1,wrk2,lwrk2,iwrk,kwrk,ier) ! in :dierckx_f2py:surfit.f
            integer optional,check(iopt>=-1 && iopt<=1),intent(in) :: iopt = 0
            integer intent(in) :: m
            real*8 dimension(m),intent(in),depend(m) :: x
            real*8 dimension(m),intent(in),depend(m) :: y
            real*8 dimension(m),intent(in),depend(m) :: z
            real*8 dimension(m),intent(in),depend(m) :: w
            real*8 intent(in) :: xb
            real*8 intent(in) :: xe
            real*8 intent(in) :: yb
            real*8 intent(in) :: ye
            integer optional,check(kx>=1),intent(in) :: kx = 3
            integer optional,check(ky>=1),intent(in) :: ky = 3
            real*8 optional,intent(in) :: s = 0.0
            integer intent(in) :: nxest
            integer intent(in) :: nyest
            integer intent(hide),depend(nxest,nyest) :: nmax = max(nxest,nyest)
            real*8 optional,intent(in) :: eps = 1e-16
            integer intent(in,out) :: nx
            real*8 dimension(nxest),intent(in,out),depend(nxest) :: tx
            integer intent(in,out) :: ny
            real*8 dimension(nyest),intent(in,out),depend(nyest) :: ty
            real*8 dimension((nxest-kx-1)*(nyest-ky-1)),intent(out),depend(nxest,kx,nyest,ky) :: c
            real*8 intent(out) :: fp
            real*8 dimension(lwrk1),intent(cache,hide),depend(lwrk1) :: wrk1
            integer intent(hide),depend(m,kx,ky,nxest,nyest) :: lwrk1 = m*(kx+1)+nxest*(7+3*kx)
            real*8 dimension(lwrk2),intent(cache,hide),depend(lwrk2) :: wrk2
            integer intent(hide),depend(m,ky,nyest) :: lwrk2 = m*(ky+1)+nyest*(7+3*ky)
            integer dimension(kwrk),intent(cache,hide),depend(kwrk) :: iwrk
            integer intent(hide),depend(m,nxest,nyest) :: kwrk = m+nxest+nyest
            integer intent(out) :: ier
        end subroutine surfit
        
        subroutine fpback(a,z,n,k,c,nest) ! in :dierckx_f2py:fpback.f
            real*8 dimension(nest,k),intent(in) :: a
            real*8 dimension(n),intent(in),depend(n) :: z
            integer intent(in) :: n
            integer intent(in) :: k
            real*8 dimension(n),intent(out),depend(n) :: c  ! FIXED: was dimension(nest)
            integer intent(in) :: nest
        end subroutine fpback
        
        subroutine fpdisc(t,n,k2,b,nest) ! in :dierckx_f2py:fpdisc.f
            real*8 dimension(n),intent(in) :: t
            integer intent(in) :: n
            integer intent(in) :: k2
            real*8 dimension(nest,k2),intent(out),depend(nest,k2) :: b
            integer intent(in) :: nest
        end subroutine fpdisc
        
        subroutine fpgivs(piv,ww,cos,sin) ! in :dierckx_f2py:fpgivs.f
            real*8 intent(in,out) :: piv
            real*8 intent(in,out) :: ww
            real*8 intent(out) :: cos
            real*8 intent(out) :: sin
        end subroutine fpgivs
        
        subroutine fprank(a,f,n,m,na,tol,c,sq,rank,aa,ff,h) ! in :dierckx_f2py:fprank.f
            real*8 dimension(na,m),intent(in) :: a
            real*8 dimension(n),intent(in),depend(n) :: f
            integer intent(in) :: n
            integer intent(in) :: m
            integer intent(in) :: na
            real*8 intent(in) :: tol
            real*8 dimension(m),intent(out),depend(m) :: c
            real*8 intent(out) :: sq
            integer intent(out) :: rank
            real*8 dimension(n,m),intent(cache,hide),depend(n,m) :: aa
            real*8 dimension(n),intent(cache,hide),depend(n) :: ff
            real*8 dimension(m),intent(cache,hide),depend(m) :: h
        end subroutine fprank
        
        real*8 function fprati(p1,f1,p2,f2,p3,f3) ! in :dierckx_f2py:fprati.f
            real*8 intent(in) :: p1
            real*8 intent(in) :: f1
            real*8 intent(in) :: p2
            real*8 intent(in) :: f2
            real*8 intent(in) :: p3
            real*8 intent(in) :: f3
        end function fprati
        
        subroutine fprota(cos,sin,a,b) ! in :dierckx_f2py:fprota.f
            real*8 intent(in) :: cos
            real*8 intent(in) :: sin
            real*8 intent(in,out) :: a
            real*8 intent(in,out) :: b
        end subroutine fprota
        
        subroutine fporde(x,y,m,kx,ky,tx,nx,ty,ny,nummer,index,nreg) ! in :dierckx_f2py:fporde.f
            real*8 dimension(m),intent(in) :: x
            real*8 dimension(m),intent(in),depend(m) :: y
            integer intent(in) :: m
            integer intent(in) :: kx
            integer intent(in) :: ky
            real*8 dimension(nx),intent(in) :: tx
            integer intent(in) :: nx
            real*8 dimension(ny),intent(in) :: ty
            integer intent(in) :: ny
            integer dimension(m),intent(out),depend(m) :: nummer
            integer dimension(nreg),intent(out),depend(nreg) :: index
            integer intent(in) :: nreg
        end subroutine fporde
        
        subroutine fpbspl(t,n,k,x,l,h) ! in :dierckx_f2py:fpbspl.f
            real*8 dimension(n),intent(in) :: t
            integer intent(in) :: n
            integer intent(in) :: k
            real*8 intent(in) :: x
            integer intent(in) :: l  ! FIXED: was intent(out)
            real*8 dimension(k+1),intent(out),depend(k) :: h
        end subroutine fpbspl
        
        subroutine fpsurf(iopt,m,x,y,z,w,xb,xe,yb,ye,kxx,kyy,s,nxest,nyest,eta,tol,maxit,nmax,km1,km2,ib1,ib3,nc,intest,nrest,nx0,tx,ny0,ty,c,fp,fp0,fpint,coord,f,ff,a,q,bx,by,spx,spy,h,index,nummer,wrk,lwrk,ier) ! in :dierckx_f2py:fpsurf.f
            integer intent(in) :: iopt
            integer intent(in) :: m
            real*8 dimension(m),intent(in),depend(m) :: x
            real*8 dimension(m),intent(in),depend(m) :: y
            real*8 dimension(m),intent(in),depend(m) :: z
            real*8 dimension(m),intent(in),depend(m) :: w
            real*8 intent(in) :: xb
            real*8 intent(in) :: xe
            real*8 intent(in) :: yb
            real*8 intent(in) :: ye
            integer intent(in) :: kxx
            integer intent(in) :: kyy
            real*8 intent(in) :: s
            integer intent(in) :: nxest
            integer intent(in) :: nyest
            real*8 intent(in) :: eta
            real*8 intent(in) :: tol
            integer intent(in) :: maxit
            integer intent(hide),depend(nxest,nyest) :: nmax = max(nxest,nyest)
            integer intent(hide),depend(kxx) :: km1 = kxx + 1
            integer intent(hide),depend(kyy) :: km2 = kyy + 1
            integer intent(hide),depend(kxx) :: ib1 = kxx * nxest + km1
            integer intent(hide),depend(kyy) :: ib3 = kyy * nyest + km2
            integer intent(hide),depend(nxest,nyest,kxx,kyy) :: nc = (nxest-kxx-1)*(nyest-kyy-1)
            integer intent(hide),depend(m,nxest,kxx) :: intest = m + 2*kxx
            integer intent(hide),depend(m,nyest,kyy) :: nrest = m + 2*kyy
            integer intent(in,out) :: nx0
            real*8 dimension(nxest),intent(in,out),depend(nxest) :: tx
            integer intent(in,out) :: ny0
            real*8 dimension(nyest),intent(in,out),depend(nyest) :: ty
            real*8 dimension(nc),intent(in,out),depend(nc) :: c
            real*8 intent(in,out) :: fp
            real*8 intent(in,out) :: fp0
            real*8 dimension(intest),intent(cache,hide),depend(intest) :: fpint
            real*8 dimension(intest),intent(cache,hide),depend(intest) :: coord
            real*8 dimension(nc),intent(cache,hide),depend(nc) :: f
            real*8 dimension(nc,nc),intent(cache,hide),depend(nc) :: ff
            real*8 dimension(nc,ib1),intent(cache,hide),depend(nc,ib1) :: a
            real*8 dimension(nc,ib3),intent(cache,hide),depend(nc,ib3) :: q
            real*8 dimension(nxest,km1),intent(cache,hide),depend(nxest,km1) :: bx
            real*8 dimension(nyest,km2),intent(cache,hide),depend(nyest,km2) :: by
            real*8 dimension(m,kxx+1),intent(cache,hide),depend(m,kxx) :: spx
            real*8 dimension(m,kyy+1),intent(cache,hide),depend(m,kyy) :: spy
            real*8 dimension(ib1),intent(cache,hide),depend(ib1) :: h
            integer dimension(nrest),intent(cache,hide),depend(nrest) :: index
            integer dimension(m),intent(cache,hide),depend(m) :: nummer
            real*8 dimension(lwrk),intent(cache,hide),depend(lwrk) :: wrk
            integer intent(hide),depend(m,kxx,kyy,nyest) :: lwrk = m*(kxx+1+kyy+1)+2*(nxest-2*kxx-1)*nyest
            integer intent(out) :: ier
        end subroutine fpsurf
    end interface 
end python module dierckx_f2py